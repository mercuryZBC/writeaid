// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: knowledge_base.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_CREATE_OK        Status = 0
	Status_CREATE_ERROR     Status = 1
	Status_GET_LIST_OK      Status = 2
	Status_GET_LIST_ERROR   Status = 3
	Status_GET_DETAIL_OK    Status = 4
	Status_GET_DETAIL_ERROR Status = 5
	Status_DELETE_OK        Status = 6
	Status_DELETE_ERROR     Status = 7
	Status_UPDATE_OK        Status = 8
	Status_UPDATE_ERROR     Status = 9
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "CREATE_OK",
		1: "CREATE_ERROR",
		2: "GET_LIST_OK",
		3: "GET_LIST_ERROR",
		4: "GET_DETAIL_OK",
		5: "GET_DETAIL_ERROR",
		6: "DELETE_OK",
		7: "DELETE_ERROR",
		8: "UPDATE_OK",
		9: "UPDATE_ERROR",
	}
	Status_value = map[string]int32{
		"CREATE_OK":        0,
		"CREATE_ERROR":     1,
		"GET_LIST_OK":      2,
		"GET_LIST_ERROR":   3,
		"GET_DETAIL_OK":    4,
		"GET_DETAIL_ERROR": 5,
		"DELETE_OK":        6,
		"DELETE_ERROR":     7,
		"UPDATE_OK":        8,
		"UPDATE_ERROR":     9,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_knowledge_base_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_knowledge_base_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{0}
}

type KnowledgeBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KbId          int64  `protobuf:"varint,1,opt,name=kbId,proto3" json:"kbId,omitempty"`
	KbName        string `protobuf:"bytes,2,opt,name=kbName,proto3" json:"kbName,omitempty"`
	KbOwnerId     int64  `protobuf:"varint,3,opt,name=kbOwnerId,proto3" json:"kbOwnerId,omitempty"`
	KbDescription string `protobuf:"bytes,4,opt,name=kbDescription,proto3" json:"kbDescription,omitempty"`
	KbIsPublic    bool   `protobuf:"varint,5,opt,name=kbIsPublic,proto3" json:"kbIsPublic,omitempty"`
	KbCreateAt    int64  `protobuf:"varint,6,opt,name=kbCreateAt,proto3" json:"kbCreateAt,omitempty"`
	KbUpdateAt    int64  `protobuf:"varint,7,opt,name=kbUpdateAt,proto3" json:"kbUpdateAt,omitempty"`
}

func (x *KnowledgeBase) Reset() {
	*x = KnowledgeBase{}
	mi := &file_knowledge_base_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase) ProtoMessage() {}

func (x *KnowledgeBase) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase.ProtoReflect.Descriptor instead.
func (*KnowledgeBase) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{0}
}

func (x *KnowledgeBase) GetKbId() int64 {
	if x != nil {
		return x.KbId
	}
	return 0
}

func (x *KnowledgeBase) GetKbName() string {
	if x != nil {
		return x.KbName
	}
	return ""
}

func (x *KnowledgeBase) GetKbOwnerId() int64 {
	if x != nil {
		return x.KbOwnerId
	}
	return 0
}

func (x *KnowledgeBase) GetKbDescription() string {
	if x != nil {
		return x.KbDescription
	}
	return ""
}

func (x *KnowledgeBase) GetKbIsPublic() bool {
	if x != nil {
		return x.KbIsPublic
	}
	return false
}

func (x *KnowledgeBase) GetKbCreateAt() int64 {
	if x != nil {
		return x.KbCreateAt
	}
	return 0
}

func (x *KnowledgeBase) GetKbUpdateAt() int64 {
	if x != nil {
		return x.KbUpdateAt
	}
	return 0
}

type CreateKnowledgeBaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeBase *KnowledgeBase `protobuf:"bytes,1,opt,name=knowledgeBase,proto3" json:"knowledgeBase,omitempty"`
}

func (x *CreateKnowledgeBaseReq) Reset() {
	*x = CreateKnowledgeBaseReq{}
	mi := &file_knowledge_base_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseReq) ProtoMessage() {}

func (x *CreateKnowledgeBaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseReq.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseReq) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{1}
}

func (x *CreateKnowledgeBaseReq) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type CreateKnowledgeBaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        Status         `protobuf:"varint,1,opt,name=status,proto3,enum=knowledgeBaseService.Status" json:"status,omitempty"`
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,2,opt,name=knowledgeBase,proto3" json:"knowledgeBase,omitempty"`
}

func (x *CreateKnowledgeBaseResp) Reset() {
	*x = CreateKnowledgeBaseResp{}
	mi := &file_knowledge_base_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseResp) ProtoMessage() {}

func (x *CreateKnowledgeBaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseResp.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseResp) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{2}
}

func (x *CreateKnowledgeBaseResp) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CREATE_OK
}

func (x *CreateKnowledgeBaseResp) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type GetKnowledgeBaseListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetKnowledgeBaseListReq) Reset() {
	*x = GetKnowledgeBaseListReq{}
	mi := &file_knowledge_base_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseListReq) ProtoMessage() {}

func (x *GetKnowledgeBaseListReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseListReq.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseListReq) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{3}
}

func (x *GetKnowledgeBaseListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetKnowledgeBaseListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         Status           `protobuf:"varint,1,opt,name=status,proto3,enum=knowledgeBaseService.Status" json:"status,omitempty"`
	KnowledgeBases []*KnowledgeBase `protobuf:"bytes,2,rep,name=knowledgeBases,proto3" json:"knowledgeBases,omitempty"`
}

func (x *GetKnowledgeBaseListResp) Reset() {
	*x = GetKnowledgeBaseListResp{}
	mi := &file_knowledge_base_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseListResp) ProtoMessage() {}

func (x *GetKnowledgeBaseListResp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseListResp.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseListResp) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{4}
}

func (x *GetKnowledgeBaseListResp) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CREATE_OK
}

func (x *GetKnowledgeBaseListResp) GetKnowledgeBases() []*KnowledgeBase {
	if x != nil {
		return x.KnowledgeBases
	}
	return nil
}

type GetKnowledgeBaseDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KbId   int64 `protobuf:"varint,2,opt,name=kbId,proto3" json:"kbId,omitempty"`
}

func (x *GetKnowledgeBaseDetailReq) Reset() {
	*x = GetKnowledgeBaseDetailReq{}
	mi := &file_knowledge_base_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseDetailReq) ProtoMessage() {}

func (x *GetKnowledgeBaseDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseDetailReq.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseDetailReq) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{5}
}

func (x *GetKnowledgeBaseDetailReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetKnowledgeBaseDetailReq) GetKbId() int64 {
	if x != nil {
		return x.KbId
	}
	return 0
}

type GetKnowledgeBaseDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        Status         `protobuf:"varint,1,opt,name=status,proto3,enum=knowledgeBaseService.Status" json:"status,omitempty"`
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,2,opt,name=knowledgeBase,proto3" json:"knowledgeBase,omitempty"`
}

func (x *GetKnowledgeBaseDetailResp) Reset() {
	*x = GetKnowledgeBaseDetailResp{}
	mi := &file_knowledge_base_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseDetailResp) ProtoMessage() {}

func (x *GetKnowledgeBaseDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseDetailResp.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseDetailResp) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{6}
}

func (x *GetKnowledgeBaseDetailResp) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CREATE_OK
}

func (x *GetKnowledgeBaseDetailResp) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type DeleteKnowledgeBaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	KbId   int64 `protobuf:"varint,2,opt,name=kbId,proto3" json:"kbId,omitempty"`
}

func (x *DeleteKnowledgeBaseReq) Reset() {
	*x = DeleteKnowledgeBaseReq{}
	mi := &file_knowledge_base_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseReq) ProtoMessage() {}

func (x *DeleteKnowledgeBaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseReq.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseReq) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteKnowledgeBaseReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteKnowledgeBaseReq) GetKbId() int64 {
	if x != nil {
		return x.KbId
	}
	return 0
}

type DeleteKnowledgeBaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=knowledgeBaseService.Status" json:"status,omitempty"`
}

func (x *DeleteKnowledgeBaseResp) Reset() {
	*x = DeleteKnowledgeBaseResp{}
	mi := &file_knowledge_base_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseResp) ProtoMessage() {}

func (x *DeleteKnowledgeBaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseResp.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseResp) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteKnowledgeBaseResp) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CREATE_OK
}

type UpdateKnowledgeBaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeBase *KnowledgeBase `protobuf:"bytes,1,opt,name=knowledgeBase,proto3" json:"knowledgeBase,omitempty"`
}

func (x *UpdateKnowledgeBaseReq) Reset() {
	*x = UpdateKnowledgeBaseReq{}
	mi := &file_knowledge_base_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseReq) ProtoMessage() {}

func (x *UpdateKnowledgeBaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseReq.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseReq) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateKnowledgeBaseReq) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type UpdateKnowledgeBaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        Status         `protobuf:"varint,1,opt,name=status,proto3,enum=knowledgeBaseService.Status" json:"status,omitempty"`
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,2,opt,name=knowledgeBase,proto3" json:"knowledgeBase,omitempty"`
}

func (x *UpdateKnowledgeBaseResp) Reset() {
	*x = UpdateKnowledgeBaseResp{}
	mi := &file_knowledge_base_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseResp) ProtoMessage() {}

func (x *UpdateKnowledgeBaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_base_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseResp.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseResp) Descriptor() ([]byte, []int) {
	return file_knowledge_base_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateKnowledgeBaseResp) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CREATE_OK
}

func (x *UpdateKnowledgeBaseResp) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

var File_knowledge_base_proto protoreflect.FileDescriptor

var file_knowledge_base_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xdf, 0x01, 0x0a,
	0x0d, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x62,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6b, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x62,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6b,
	0x62, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x62, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6b, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6b, 0x62, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6b, 0x62, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x6b, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6b, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6b, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6b, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x63,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0d, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x62, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x49, 0x0a, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x62,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a,
	0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x2a, 0xb9, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x4b,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4f, 0x4b, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x54,
	0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x08, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x09, 0x32, 0xe2, 0x04, 0x0a, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2d, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x2e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x7b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x2e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x72, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_knowledge_base_proto_rawDescOnce sync.Once
	file_knowledge_base_proto_rawDescData = file_knowledge_base_proto_rawDesc
)

func file_knowledge_base_proto_rawDescGZIP() []byte {
	file_knowledge_base_proto_rawDescOnce.Do(func() {
		file_knowledge_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_knowledge_base_proto_rawDescData)
	})
	return file_knowledge_base_proto_rawDescData
}

var file_knowledge_base_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_knowledge_base_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_knowledge_base_proto_goTypes = []any{
	(Status)(0),                        // 0: knowledgeBaseService.Status
	(*KnowledgeBase)(nil),              // 1: knowledgeBaseService.KnowledgeBase
	(*CreateKnowledgeBaseReq)(nil),     // 2: knowledgeBaseService.CreateKnowledgeBaseReq
	(*CreateKnowledgeBaseResp)(nil),    // 3: knowledgeBaseService.CreateKnowledgeBaseResp
	(*GetKnowledgeBaseListReq)(nil),    // 4: knowledgeBaseService.GetKnowledgeBaseListReq
	(*GetKnowledgeBaseListResp)(nil),   // 5: knowledgeBaseService.GetKnowledgeBaseListResp
	(*GetKnowledgeBaseDetailReq)(nil),  // 6: knowledgeBaseService.GetKnowledgeBaseDetailReq
	(*GetKnowledgeBaseDetailResp)(nil), // 7: knowledgeBaseService.GetKnowledgeBaseDetailResp
	(*DeleteKnowledgeBaseReq)(nil),     // 8: knowledgeBaseService.DeleteKnowledgeBaseReq
	(*DeleteKnowledgeBaseResp)(nil),    // 9: knowledgeBaseService.DeleteKnowledgeBaseResp
	(*UpdateKnowledgeBaseReq)(nil),     // 10: knowledgeBaseService.UpdateKnowledgeBaseReq
	(*UpdateKnowledgeBaseResp)(nil),    // 11: knowledgeBaseService.UpdateKnowledgeBaseResp
}
var file_knowledge_base_proto_depIdxs = []int32{
	1,  // 0: knowledgeBaseService.CreateKnowledgeBaseReq.knowledgeBase:type_name -> knowledgeBaseService.KnowledgeBase
	0,  // 1: knowledgeBaseService.CreateKnowledgeBaseResp.status:type_name -> knowledgeBaseService.Status
	1,  // 2: knowledgeBaseService.CreateKnowledgeBaseResp.knowledgeBase:type_name -> knowledgeBaseService.KnowledgeBase
	0,  // 3: knowledgeBaseService.GetKnowledgeBaseListResp.status:type_name -> knowledgeBaseService.Status
	1,  // 4: knowledgeBaseService.GetKnowledgeBaseListResp.knowledgeBases:type_name -> knowledgeBaseService.KnowledgeBase
	0,  // 5: knowledgeBaseService.GetKnowledgeBaseDetailResp.status:type_name -> knowledgeBaseService.Status
	1,  // 6: knowledgeBaseService.GetKnowledgeBaseDetailResp.knowledgeBase:type_name -> knowledgeBaseService.KnowledgeBase
	0,  // 7: knowledgeBaseService.DeleteKnowledgeBaseResp.status:type_name -> knowledgeBaseService.Status
	1,  // 8: knowledgeBaseService.UpdateKnowledgeBaseReq.knowledgeBase:type_name -> knowledgeBaseService.KnowledgeBase
	0,  // 9: knowledgeBaseService.UpdateKnowledgeBaseResp.status:type_name -> knowledgeBaseService.Status
	1,  // 10: knowledgeBaseService.UpdateKnowledgeBaseResp.knowledgeBase:type_name -> knowledgeBaseService.KnowledgeBase
	2,  // 11: knowledgeBaseService.KnowledgeService.CreateKnowledgeBase:input_type -> knowledgeBaseService.CreateKnowledgeBaseReq
	4,  // 12: knowledgeBaseService.KnowledgeService.GetKnowledgeBaseList:input_type -> knowledgeBaseService.GetKnowledgeBaseListReq
	6,  // 13: knowledgeBaseService.KnowledgeService.GetKnowledgeBaseDetail:input_type -> knowledgeBaseService.GetKnowledgeBaseDetailReq
	8,  // 14: knowledgeBaseService.KnowledgeService.DeleteKnowledgeBase:input_type -> knowledgeBaseService.DeleteKnowledgeBaseReq
	10, // 15: knowledgeBaseService.KnowledgeService.UpdateKnowledgeBase:input_type -> knowledgeBaseService.UpdateKnowledgeBaseReq
	3,  // 16: knowledgeBaseService.KnowledgeService.CreateKnowledgeBase:output_type -> knowledgeBaseService.CreateKnowledgeBaseResp
	5,  // 17: knowledgeBaseService.KnowledgeService.GetKnowledgeBaseList:output_type -> knowledgeBaseService.GetKnowledgeBaseListResp
	7,  // 18: knowledgeBaseService.KnowledgeService.GetKnowledgeBaseDetail:output_type -> knowledgeBaseService.GetKnowledgeBaseDetailResp
	9,  // 19: knowledgeBaseService.KnowledgeService.DeleteKnowledgeBase:output_type -> knowledgeBaseService.DeleteKnowledgeBaseResp
	11, // 20: knowledgeBaseService.KnowledgeService.UpdateKnowledgeBase:output_type -> knowledgeBaseService.UpdateKnowledgeBaseResp
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_knowledge_base_proto_init() }
func file_knowledge_base_proto_init() {
	if File_knowledge_base_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_knowledge_base_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_knowledge_base_proto_goTypes,
		DependencyIndexes: file_knowledge_base_proto_depIdxs,
		EnumInfos:         file_knowledge_base_proto_enumTypes,
		MessageInfos:      file_knowledge_base_proto_msgTypes,
	}.Build()
	File_knowledge_base_proto = out.File
	file_knowledge_base_proto_rawDesc = nil
	file_knowledge_base_proto_goTypes = nil
	file_knowledge_base_proto_depIdxs = nil
}
